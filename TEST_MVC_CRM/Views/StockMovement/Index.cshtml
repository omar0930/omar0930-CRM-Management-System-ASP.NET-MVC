@model IEnumerable<TEST_MVC_CRM.Models.StockMovementViewModel>

@{
    ViewBag.Title = "Index";
}

<h2>Index</h2>

<p>
    <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#createModal">
        Create New
    </button>
</p>

<table class="table">
    <tr>
        <th>@Html.DisplayNameFor(model => model.ProductId)</th>
        <th>@Html.DisplayNameFor(model => model.ProductName)</th>
        <th>@Html.DisplayNameFor(model => model.Quantity)</th>
        <th>@Html.DisplayNameFor(model => model.Date)</th>
        <th>@Html.DisplayNameFor(model => model.MovementType)</th>
        <th></th>
    </tr>

    @foreach (var item in Model)
    {
        <tr>
            <td>@Html.DisplayFor(modelItem => item.ProductId)</td>
            <td>@Html.DisplayFor(modelItem => item.ProductName)</td>
            <td>@Html.DisplayFor(modelItem => item.Quantity)</td>
            <td>@Html.DisplayFor(modelItem => item.Date)</td>
            <td>@Html.DisplayFor(modelItem => item.MovementType)</td>
            <td>
                @Html.ActionLink("Edit", "Edit", new { id = item.Id }) |
                @Html.ActionLink("Details", "Details", new { id = item.Id }) |
                @Html.ActionLink("Delete", "Delete", new { id = item.Id })
            </td>
        </tr>
    }
</table>

<!-- Modal for Creating New Stock Movement -->
<div class="modal fade" id="createModal" tabindex="-1" aria-labelledby="createModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="createModalLabel">Create New Stock Movement</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form id="createForm" method="post">
                <div class="modal-body">
                    <div class="mb-3">
                        @Html.DropDownList("ProductId", (IEnumerable<SelectListItem>)ViewBag.AllProducts, "-- Select Product --", new { @class = "form-control", @id = "ProductId" })
                    </div>
                    <div class="mb-3">
                        <label for="Quantity" class="form-label">Quantity</label>
                        <input type="number" class="form-control" name="Quantity" id="Quantity" required>
                    </div>
                    <div class="mb-3">
                        <label for="Date" class="form-label">Date</label>
                        <input type="date" class="form-control" name="Date" id="Date" required>
                    </div>
                    <div class="mb-3">
                        <label for="MovementType" class="form-label">Movement Type</label>
                        <select class="form-control" id="MovementType" name="MovementType">
                            <option value="1">In</option>
                            <option value="0">Out</option>
                        </select>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                        <button type="submit" class="btn btn-primary">Save changes</button>
                    </div>
            </form>
        </div>
    </div>
</div>

<script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<script>
    function ValidateQuantity(QtyRequested) {
        if (QtyRequested) {
            console.log("validate Qty: " + QtyRequested);
            var productId = $('#ProductId').val();
            console.log("Product ID: " + productId);

            // AJAX request to get product by ID
            $.ajax({
                url: '@Url.Action("GetProductById", "Product")',
                type: 'GET',
                data: { id: productId }, // Pass the ProductId as a parameter
                success: function (result) {
                    if (result.ErrorMessage) {
                        console.log("Error: " + result.ErrorMessage);
                    } else {
                        console.log("Product retrieved successfully", result);
                        if (QtyRequested > result.CurrentStock) {
                            console.log("Error: " + "The quantity exceeded the limit !");
                            Swal.fire({
                                icon: "error",
                                title: "Oops... the quantity exceeded the limit !",
                                text: result.ErrorMessage,
                            });
                        }
                    }
                },
                error: function (xhr, status, error) {
                    console.error("Error occurred: " + error);
                    Swal.fire({
                        icon: "error",
                        title: "Oops...",
                        text: error,
                    });
                }
            });
        } else {
            console.log('No Quantity Entered');
        }
    }

    $(document).ready(function () {
        $('#Quantity').change(function () {
            var qty = $(this).val();
            console.log("Quantity changed: " + qty);
            ValidateQuantity(qty);
        });

        $('#createForm').submit(function (e) {
            e.preventDefault(); // Prevent the default form submission
            console.log("Form Submitted");

            $.ajax({
                url: '@Url.Action("Create", "StockMovement")',
                type: 'POST',
                data: $(this).serialize(),
                success: function (result) {
                    if (result.ErrorMessage) {
                        Swal.fire({
                            icon: "error",
                            title: "Oops...",
                            text: result.ErrorMessage,
                        });
                    } else {
                        $('#createModal').modal('hide');
                        location.reload(); // Reloads the page to show updated data
                    }
                },
                error: function (xhr, status, error) {
                    console.error("Error occurred: " + error);
                    alert("An error occurred while saving the data.");
                }
            });
        });
    });
</script>
